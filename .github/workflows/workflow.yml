name: workflow.yml

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 소스 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. JDK 17 환경 설정 (Temurin 배포판 사용)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yml
      - run: echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
      - run: cat ./src/main/resources/application.yml

      - name: Create docker-compose.prod.yml from secret
        run: echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > docker-compose.prod.yml

      - name: Create docker-compose.test.yml from secret
        run: echo "${{ secrets.DOCKER_COMPOSE_TEST }}" > docker-compose.test.yml



      - name: Create Firebase Admin JSON
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "effort-stone-firebase-admin.json"
          json: ${{ secrets.FIREBASE_ADMIN_JSON }}
          dir: 'src/main/resources/'



      # 3. gradlew 파일 실행 권한 부여
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      # 4. Gradle 빌드 (bootJar까지 수행, 테스트 제외)
      - name: Build with Gradle (bootJar, no tests)
        run: ./gradlew clean bootJar -x test --stacktrace

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-web-image .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-web-image

      # 7. 운영(Production) 서버 배포 (main 브랜치 전용)
      - name: Deploy Production to EC2 via SSH
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.2.0
        env:
          COMPOSE: "/home/ubuntu/docker-compose.yml"
        with:
          host: ${{ secrets.HOST }}         # EC2 서버의 퍼블릭 IP 또는 도메인
          username: ubuntu                  # EC2 접속 사용자
          key: ${{ secrets.KEY }}           # SSH 개인키 (GitHub Secrets)
          port: ${{ secrets.PORT }}         # SSH 포트
          envs: COMPOSE
          script: |
            cd /home/ubuntu/

            # 7-3. .env 파일 생성
            sudo tee .env > /dev/null <<'EOF'
            ${{ secrets.ENV_VARS }}
            EOF

            # 7-4. Docker 소켓 권한 설정
            sudo chmod 666 /var/run/docker.sock

            # 7-5. 기존 컨테이너 종료 (주의: 운영 환경에서 신중히!)
            sudo docker rm -f $(sudo docker ps -qa) || true

            # 7-6. 최신 이미지 Pull 및 컨테이너 기동
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-web-image
            sudo docker-compose -f docker-compose.yml --env-file ./.env up -d

            # 7-7. 사용하지 않는 Docker 이미지 정리
            sudo docker image prune -f

      # 10. 테스트(Test) 서버 배포 (develop 브랜치 전용)
      - name: Deploy Test to EC2 via SSH
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}         # 테스트 서버 주소 (운영과 다르거나 동일 서버 내 포트 분리)
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}           # 테스트 서버 SSH 포트 (필요시)
          envs: COMPOSE
          script: |
            cd /home/ubuntu/
            # 테스트 환경용 .env 파일 생성
            sudo tee .env > /dev/null <<'EOF'
            ${{ secrets.ENV_VARS }}
            EOF
            sudo chmod 666 /var/run/docker.sock
            # 기존 컨테이너 종료
            sudo docker rm -f $(sudo docker ps -qa) || true
            # 최신 이미지 Pull 및 테스트 컨테이너 기동 (docker-compose.test.yml 사용)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-web-image
            sudo docker-compose -f docker-compose.test.yml --env-file ./.env up -d
            # 사용하지 않는 Docker 이미지 정리
            sudo docker image prune -f
