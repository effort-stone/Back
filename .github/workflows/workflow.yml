name: workflow.yml

# main 브랜치에 push될 때 자동 실행
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # ------------------------------------------------------
      # 1. 리포지토리 소스 코드 체크아웃
      # ------------------------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@v3
        # GitHub 리포지토리의 코드를 워크플로우 러너로 가져옵니다.

      # gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      # ------------------------------------------------------
      # 2. JDK 17 환경 설정 (Temurin 배포판 사용)
      # ------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle  # Gradle 캐시를 활성화하여 빌드 속도를 향상합니다.

      # ------------------------------------------------------
      # 3. Gradle을 사용하여 Spring Boot 애플리케이션 JAR 파일 생성
      #    bootJar 태스크를 통해 JAR 파일을 빌드합니다.
      # ------------------------------------------------------
      - name: Build Application with Gradle
        run: ./gradlew bootJar

      # ------------------------------------------------------
      # 4. Docker Hub 로그인
      #    Docker 이미지를 빌드한 후 Docker Hub에 push하기 위해 로그인합니다.
      # ------------------------------------------------------
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # ------------------------------------------------------
      # 5. 웹 애플리케이션 Docker 이미지 빌드 및 푸시
      # ------------------------------------------------------
      - name: Build and Push Web Docker Image
        run: |
          # 현재 디렉터리의 Dockerfile을 사용하여 'my-repo/my-web-image' 이미지를 빌드합니다.
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-web-image .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-web-image

      # ------------------------------------------------------
      # 6. 애플리케이션 application.yml 파일 가져오기
      # 
      
      - name: Create application.yml file from secret
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml


      # ------------------------------------------------------
      # 7. EC2 서버에 SSH로 접속하여 배포 진행
      # ------------------------------------------------------
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}         # EC2 서버의 퍼블릭 IP 또는 도메인
          username: ubuntu                   # EC2 접속 사용자 (환경에 맞게 변경)
          key: ${{ secrets.KEY }}            # SSH 개인키 (GitHub Secrets에 저장)
          port: ${{ secrets.PORT }}
          # 아래 스크립트는 EC2 서버에서 실행됩니다.
          script: |
            # 지정된 배포 디렉터리로 이동 (해당 디렉터리에 미리 Git 저장소가 클론되어 있어야 함)
            cd /home/ubuntu/

            # ------------------------------------------------------
            # 7-1. 환경변수 파일(.env) 생성 또는 업데이트
            #      ENV_VARS에는 "KEY1=value1\nKEY2=value2"와 같은 형식의 문자열이 들어있어야 합니다.
            # ------------------------------------------------------
            echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null

            # ------------------------------------------------------
            # 7-2. docker-compose 파일 생성 또는 업데이트
            #      DOCKER_COMPOSE에는 docker-compose.yaml 파일의 전체 내용이 포함되어 있어야 합니다.
            # ------------------------------------------------------
            echo "${{ secrets.DOCKER_COMPOSE }}" | sudo tee docker-compose.yml > /dev/null

            # ------------------------------------------------------
            # 7-3. Docker 소켓 권한 설정 및 기존 컨테이너 종료
            # ------------------------------------------------------
            sudo chmod 666 /var/run/docker.sock
            sudo docker rm -f $(sudo docker ps -qa) || true

            # ------------------------------------------------------
            # 7-4. 최신 Docker 이미지 Pull 및 docker-compose로 컨테이너 재실행
            # ------------------------------------------------------
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-web-image
            sudo docker-compose -f docker-compose.yaml --env-file ./.env up -d

            # ------------------------------------------------------
            # 7-5. 사용하지 않는 Docker 이미지 정리
            # ------------------------------------------------------
            sudo docker image prune -f
